{"version":3,"file":"static/js/769.b73d08e3.chunk.js","mappings":"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","sources":["components/TaskForm.js","components/Task.js","components/TasksHeader.js","components/Tasks.js"],"sourcesContent":["import { useState } from \"react\"\r\nimport { BsAlarmFill } from \"react-icons/bs\"\r\nimport FloatingLabel from 'react-bootstrap/esm/FloatingLabel';\r\nimport Form from 'react-bootstrap/esm/Form';\r\nimport Button from 'react-bootstrap/esm/Button';\r\n\r\n\r\nconst TaskForm = ({ task, form, _cancel }) => {\r\n    const [taskData, setTaskData] = useState(task)\r\n\r\n    const submit = () => {\r\n        form({ ...taskData, name: (taskData.name === \"\") ? \"New Task\" : taskData.name, freshTask: false })\r\n    }\r\n\r\n    const ReminderIcon = () => {\r\n        if (taskData.reminder) return (<BsAlarmFill size={25} />)\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submit}>\r\n            <div className=\"margin-1em\">\r\n                <FloatingLabel controlId=\"floatingInput\" label=\"Task\" className=\"mb-3\">\r\n                    <Form.Control\r\n                        autoFocus\r\n                        autoComplete=\"off\"\r\n                        className=\"form-control name\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        placeholder=\"task\"\r\n                        value={taskData.name ? taskData.name : \"\"}\r\n                        onChange={(e) => setTaskData({ ...taskData, name: e.target.value })}\r\n                    />\r\n                </FloatingLabel>\r\n\r\n                <FloatingLabel controlId=\"floatingInput\" label=\"Description\" className=\"mb-3\">\r\n                    <Form.Control\r\n                        autoComplete=\"off\"\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"description\"\r\n                        placeholder=\"description\"\r\n                        value={taskData.description ? taskData.description : \"\"}\r\n                        onChange={(e) => setTaskData({ ...taskData, description: e.target.value })}\r\n                    />\r\n                </FloatingLabel>\r\n\r\n                <div className=\"taskFormTime\">\r\n                    <FloatingLabel controlId=\"floatingInput\" label=\"Time\" className=\"mb-3\">\r\n                        <Form.Control\r\n                            className=\"form-control\"\r\n                            type=\"time\"\r\n                            name=\"time\"\r\n                            placeholder=\"time\"\r\n                            value={taskData.time ? taskData.time : \"\"}\r\n                            onChange={(e) => setTaskData({ ...taskData, time: e.target.value })}\r\n                        />\r\n                    </FloatingLabel>\r\n\r\n                    <FloatingLabel controlId=\"floatingInput\" label=\"Date\" className=\"mb-3\">\r\n                        <Form.Control\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            name=\"date\"\r\n                            value={taskData.date ? taskData.date : \"\"}\r\n                            onChange={(e) => { setTaskData({ ...taskData, date: e.target.value }) }}\r\n                        />\r\n                    </FloatingLabel>\r\n\r\n                </div>\r\n\r\n                {/* Reminder Button */}\r\n                {/* <Button className=\"mb-3\"\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        size=\"lg\"\r\n                        style={{ padding: \"0\" }}\r\n                        onClick={() => setTaskData({ ...taskData, reminder: !taskData.reminder })}\r\n                    >Reminder(NOT YET IMPLIMENTED)<ReminderIcon /></Button> */}\r\n\r\n                <FloatingLabel controlId=\"floatingInput\" label=\"Location\" className=\"mb-3\">\r\n                    <Form.Control\r\n                        autoComplete=\"off\"\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"location\"\r\n                        placeholder=\"location\"\r\n                        value={taskData.location ? taskData.location : \"\"}\r\n                        onChange={(e) => setTaskData({ ...taskData, location: e.target.value })}\r\n                    />\r\n                </FloatingLabel>\r\n\r\n                <div className=\"d-grid btn-grid\">\r\n                    <Button variant=\"outline-success\" type=\"submit\" size=\"lg\"><strong>Save</strong></Button>\r\n                    <Button variant=\"outline-danger\" type=\"button\" size=\"lg\" onClick={() => _cancel()}><strong>Cancel</strong></Button>\r\n                </div>\r\n            </div>\r\n        </form >\r\n    )\r\n}\r\n\r\nexport default TaskForm","import React, { useEffect, useState } from \"react\"\r\nimport TaskForm from \"./TaskForm\"\r\nimport { BsAlarmFill } from \"react-icons/bs\"\r\nimport { BsPencilSquare } from \"react-icons/bs\"\r\nimport { BsFillCalendarEventFill } from \"react-icons/bs\"\r\nimport { BsFillPinMapFill } from \"react-icons/bs\"\r\nimport moment from \"moment\"\r\n\r\n\r\nconst Task = ({ task, _updateTask, _deleteTask }) => {\r\n\r\n    const [moreInfo, setMoreInfo] = useState(false)\r\n    const [editTaskToggel, setEditTaskToggel] = useState(task.freshTask)\r\n\r\n    useEffect(() => {\r\n        timeToReminder(task.date, task.time)\r\n    }, [editTaskToggel, moreInfo])\r\n\r\n    const ReminderIcon = () => {\r\n        if (task.reminder) return (<BsAlarmFill size={25} />)\r\n    }\r\n\r\n    const form = (task) => {\r\n        _updateTask(task)\r\n        setEditTaskToggel(false)\r\n    }\r\n\r\n    const deleteTask = () => {\r\n        _deleteTask(task)\r\n        setMoreInfo(false)\r\n    }\r\n\r\n    const timeToReminder = (date, time) => {\r\n        const reminder = new Date(date + \" \" + time)\r\n        return moment(reminder).fromNow()\r\n    }\r\n\r\n    const cancel = () => {\r\n        if (task.freshTask) {\r\n            deleteTask()\r\n        } else {\r\n            setEditTaskToggel(false)\r\n        }\r\n    }\r\n\r\n\r\n    const TaskInfo = () => {\r\n        if (!moreInfo) {\r\n            return (\r\n                <div onClick={() => (!editTaskToggel) && setMoreInfo(!moreInfo)}>\r\n                    <div className=\"card bg-dark\">\r\n                        <div className=\"card-header taskLess\">\r\n                            <h2 >{task.name}</h2>\r\n                            <h2 className=\"taskLessInfo\">{timeToReminder(task.date, task.time)} &nbsp; <ReminderIcon /></h2>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"time\">{task.time}</div> */}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div onClick={() => (!editTaskToggel) && setMoreInfo(!moreInfo)}>\r\n                <div className=\"card bg-dark\">\r\n                    <div className=\"card-header taskLess\">\r\n                        <h2 >{task.name}</h2>\r\n                        <h2 className=\"taskLessInfo\">\r\n                            {timeToReminder(task.date, task.time)} &nbsp; <ReminderIcon />\r\n                        </h2>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><BsPencilSquare /> {task.description}</p>\r\n                        <p className=\"card-text\"><BsFillCalendarEventFill /> {task.date} {task.time}</p>\r\n                        <p className=\"card-text\"><BsFillPinMapFill /> {task.location}</p>\r\n                        <div className=\"btn-grid\">\r\n                            <button className=\"btn btn-outline-primary btn-lg\" onClick={() => { setEditTaskToggel(true) }}><strong>Edit</strong></button>\r\n                            <button className=\"btn btn-outline-danger btn-lg\" onClick={() => { deleteTask() }}><strong>Delete </strong></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    if (editTaskToggel) {\r\n        return (\r\n            <div className=\"card bg-dark\" >\r\n                <TaskForm\r\n                    task={task}\r\n                    form={form}\r\n                    _cancel={cancel} />\r\n            </div>\r\n        )\r\n    } else {\r\n        return (<TaskInfo />)\r\n    }\r\n}\r\n\r\nexport default Task","\r\nconst TasksHeader = ({ _addTask }) => {\r\n    return (\r\n        <div className=\"tasksHeader\">\r\n            <button className='btn btn-primary btn-lg' type=\"button\" onClick={() => _addTask({\r\n                name: \"\",\r\n                description: \"\",\r\n                location: \"\",\r\n                reminder: false\r\n            })}>Add Task</button>\r\n            <button className=\"btn btn-lg btn-outline-primary\" >Button</button>\r\n            <button className=\"btn btn-lg btn-outline-primary\">Button</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TasksHeader","import Task from \"./Task\"\r\nimport TasksHeader from \"./TasksHeader\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\n// Firebase\r\nimport { doc, setDoc, getDoc } from \"firebase/firestore\"\r\nimport { onAuthStateChanged } from \"firebase/auth\";\r\nimport { db, auth } from \"../firebase-config\"\r\n\r\n\r\nconst Tasks = ({ tasks, _updateTask, _deleteTask, _addTask, nav }) => {\r\n    const [user, setUser] = useState(null)\r\n    useEffect(() => {\r\n        onAuthStateChanged(auth, async (user) => {\r\n            console.log(\"onAuthStateChanged\")\r\n            if (!user) return nav(\"/\")\r\n            const docRef = doc(db, \"users\", user.uid);\r\n            const docSnap = await getDoc(docRef)\r\n            user.extraInfo = docSnap.data()\r\n            setUser(user)\r\n        })\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     if (!user) {\r\n    //         return nav(\"/\")\r\n    //     }\r\n    // })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"tasks\">\r\n                <TasksHeader _addTask={_addTask} />\r\n                {tasks.map((task, index) => {\r\n                    return <Task key={index} task={task} _updateTask={_updateTask} _deleteTask={_deleteTask} />\r\n                })}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Tasks"],"names":["task","form","_cancel","useState","taskData","setTaskData","onSubmit","name","freshTask","className","FloatingLabel","controlId","label","Form","autoFocus","autoComplete","type","placeholder","value","onChange","e","target","description","time","date","location","Button","variant","size","onClick","_updateTask","_deleteTask","moreInfo","setMoreInfo","editTaskToggel","setEditTaskToggel","useEffect","timeToReminder","ReminderIcon","reminder","deleteTask","Date","moment","fromNow","TaskInfo","_addTask","tasks","nav","setUser","onAuthStateChanged","auth","user","console","log","docRef","doc","db","uid","getDoc","docSnap","extraInfo","data","map","index"],"sourceRoot":""}