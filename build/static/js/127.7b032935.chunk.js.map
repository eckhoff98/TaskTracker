{"version":3,"file":"static/js/127.7b032935.chunk.js","mappings":"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","sources":["components/TaskForm.js","time.js","components/Task.js","components/TasksHeader.js","components/Tasks.js"],"sourcesContent":["import { useState } from \"react\"\r\nimport { BsAlarmFill } from \"react-icons/bs\"\r\nimport FloatingLabel from 'react-bootstrap/esm/FloatingLabel';\r\nimport Form from 'react-bootstrap/esm/Form';\r\nimport Button from 'react-bootstrap/esm/Button';\r\nimport { convertToDate, convertToTime } from \"../time\"\r\nimport { useEffect } from \"react\";\r\n\r\n\r\nconst TaskForm = ({ task, form, _cancel }) => {\r\n    const [taskData, setTaskData] = useState(task)\r\n    const [datetime, setdatetime] = useState()\r\n\r\n    const stringToHtmlDatetime = (string) => {\r\n        const dt = new Date(string)\r\n        dt.setMinutes(dt.getMinutes() - dt.getTimezoneOffset());\r\n        return dt.toISOString().slice(0, 16)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setdatetime(stringToHtmlDatetime(task.datetime))\r\n    }, [])\r\n\r\n    const submit = () => {\r\n        form({ ...taskData, name: (taskData.name === \"\") ? \"New Task\" : taskData.name, freshTask: false })\r\n    }\r\n\r\n    const ReminderIcon = () => {\r\n        if (taskData.reminder) return (<BsAlarmFill size={25} />)\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submit}>\r\n            <div className=\"margin-1em\">\r\n                <FloatingLabel controlId=\"floatingInput\" label=\"Task\" className=\"mb-3\">\r\n                    <Form.Control\r\n                        autoFocus\r\n                        autoComplete=\"off\"\r\n                        className=\"form-control name\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        placeholder=\"task\"\r\n                        defaultValue={taskData.name ? taskData.name : \"\"}\r\n                        onChange={(e) => setTaskData({ ...taskData, name: e.target.value })}\r\n                    />\r\n                </FloatingLabel>\r\n\r\n                <FloatingLabel controlId=\"floatingInput\" label=\"Description\" className=\"mb-3\">\r\n                    <Form.Control\r\n                        autoComplete=\"off\"\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"description\"\r\n                        placeholder=\"description\"\r\n                        defaultValue={taskData.description ? taskData.description : \"\"}\r\n                        onChange={(e) => setTaskData({ ...taskData, description: e.target.value })}\r\n                    />\r\n                </FloatingLabel>\r\n\r\n                {/* datetime */}\r\n                <FloatingLabel controlId=\"floatingInput\" label=\"datetime\" className=\"mb-3\">\r\n                    <Form.Control\r\n                        className=\"form-control\"\r\n                        type=\"datetime-local\"\r\n                        name=\"datetime\"\r\n                        placeholder=\"date time\"\r\n                        defaultValue={datetime}\r\n                        onChange={(e) => {\r\n                            setdatetime(e.target.value)\r\n                            setTaskData({ ...taskData, datetime: e.target.value })\r\n                        }}\r\n                    />\r\n                </FloatingLabel>\r\n\r\n                {/* Time And Date */}\r\n                <div className=\"btn-grid\">\r\n                    <div className=\"taskFormTime\">\r\n                        {/* datetime */}\r\n                        {/* <FloatingLabel controlId=\"floatingInput\" label=\"datetime\" className=\"mb-3\">\r\n                            <Form.Control\r\n                                className=\"form-control\"\r\n                                type=\"datetime-local\"\r\n                                name=\"datetime\"\r\n                                placeholder=\"date time\"\r\n                                // value={taskData.time ? taskData.time : \"\"}\r\n                                value={taskData.dateTime}\r\n                                onChange={(e) => setTaskData({ ...taskData, dateTime: e.target.value })}\r\n                            />\r\n                        </FloatingLabel> */}\r\n\r\n                        {/* Time */}\r\n                        {/* <FloatingLabel controlId=\"floatingInput\" label=\"Time\" className=\"mb-3\">\r\n                            <Form.Control\r\n                                className=\"form-control\"\r\n                                type=\"time\"\r\n                                name=\"time\"\r\n                                placeholder=\"time\"\r\n                                // value={taskData.time ? taskData.time : \"\"}\r\n                                value={taskData.time ? taskData.time : \"\"}\r\n                                onChange={(e) => setTaskData({ ...taskData, time: e.target.value })}\r\n                            />\r\n                        </FloatingLabel> */}\r\n\r\n                        {/* Date */}\r\n                        {/* <FloatingLabel controlId=\"floatingInput\" label=\"Date\" className=\"mb-3\">\r\n                            <Form.Control\r\n                                className=\"form-control\"\r\n                                type=\"date\"\r\n                                name=\"date\"\r\n                                value={taskData.date ? taskData.date : \"\"}\r\n                                onChange={(e) => { setTaskData({ ...taskData, date: e.target.value }) }}\r\n                            />\r\n                        </FloatingLabel> */}\r\n\r\n                    </div>\r\n\r\n                    {/* Reminder Button */}\r\n                    <Button className=\"mb-3\"\r\n                        type=\"button\"\r\n                        variant=\"outline-primary\"\r\n                        size=\"lg\"\r\n                        style={{ padding: \"0\" }}\r\n                        onClick={() => setTaskData({ ...taskData, reminder: !taskData.reminder })}\r\n                    >Reminder ( ! )<ReminderIcon /></Button>\r\n                </div>\r\n\r\n                <FloatingLabel controlId=\"floatingInput\" label=\"Location\" className=\"mb-3\">\r\n                    <Form.Control\r\n                        autoComplete=\"off\"\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"location\"\r\n                        placeholder=\"location\"\r\n                        defaultValue={taskData.location ? taskData.location : \"\"}\r\n                        onChange={(e) => setTaskData({ ...taskData, location: e.target.value })}\r\n                    />\r\n                </FloatingLabel>\r\n\r\n                <div className=\"d-grid btn-grid\">\r\n                    <Button variant=\"outline-success\" type=\"submit\" size=\"lg\"><strong>Save</strong></Button>\r\n                    <Button variant=\"outline-danger\" type=\"button\" size=\"lg\" onClick={() => _cancel()}><strong>Cancel</strong></Button>\r\n                </div>\r\n            </div>\r\n        </form >\r\n    )\r\n}\r\n\r\nexport default TaskForm","// Helper Functions \r\nexport const getCurrentDate = () => {\r\n    // convert Javascript Date to HTML Input\r\n    const now = new Date();\r\n    const day = (\"0\" + now.getDate()).slice(-2);\r\n    const month = (\"0\" + (now.getMonth() + 1)).slice(-2);\r\n    // const hour = (\"0\" + (now.getHours())).slice(-2);\r\n    // const min = (\"0\" + (now.getMinutes())).slice(-2);\r\n    const today = now.getFullYear() + \"-\" + month + \"-\" + day\r\n    console.log(\"today \" + today)\r\n    return today\r\n}\r\n\r\nexport const getCurrentTime = () => {\r\n    // convert Javascript Date to HTML Input\r\n    const now = new Date();\r\n    const hour = (\"0\" + (now.getHours())).slice(-2);\r\n    const min = (\"0\" + (now.getMinutes())).slice(-2);\r\n    const time = `${hour}:${min}`\r\n    return time\r\n}\r\n\r\nexport const convertToDate = (date) => {\r\n    const now = date\r\n    const day = (\"0\" + now.getDate()).slice(-2);\r\n    const month = (\"0\" + (now.getMonth() + 1)).slice(-2);\r\n    const today = now.getFullYear() + \"-\" + month + \"-\" + day\r\n    console.log(\"today \" + today)\r\n    return today\r\n}\r\n\r\nexport const convertToTime = (date) => {\r\n    const now = date\r\n    const hour = (\"0\" + (now.getHours())).slice(-2);\r\n    const min = (\"0\" + (now.getMinutes())).slice(-2);\r\n    const time = `${hour}:${min}`\r\n    return time\r\n}\r\n\r\n","import React, { useEffect, useState } from \"react\"\r\nimport TaskForm from \"./TaskForm\"\r\n\r\n// Icons\r\nimport {\r\n    BsFillPinMapFill,\r\n    BsFillClockFill,\r\n    BsFillCalendarEventFill,\r\n    BsPencilSquare,\r\n    BsAlarmFill\r\n} from \"react-icons/bs\"\r\n\r\n\r\nimport moment from \"moment\"\r\nimport { convertToDate, convertToTime } from \"../time\"\r\n\r\n\r\nconst Task = ({ task, _updateTask, _deleteTask }) => {\r\n\r\n    const [moreInfo, setMoreInfo] = useState(false)\r\n    const [editTaskToggel, setEditTaskToggel] = useState(task.freshTask)\r\n\r\n    useEffect(() => {\r\n        timeToReminder(task.date, task.time)\r\n    }, [editTaskToggel, moreInfo])\r\n\r\n    const ReminderIcon = () => {\r\n        if (task.reminder) return (<BsAlarmFill size={25} />)\r\n    }\r\n\r\n    const form = (task) => {\r\n        _updateTask(task)\r\n        setEditTaskToggel(false)\r\n    }\r\n\r\n    const deleteTask = () => {\r\n        _deleteTask(task)\r\n        setMoreInfo(false)\r\n    }\r\n\r\n    const timeToReminder = (datetimeString) => {\r\n        // const reminder = new Date(date + \" \" + time)\r\n        const reminder = new Date(datetimeString)\r\n        return moment(reminder).fromNow()\r\n    }\r\n\r\n    const cancel = () => {\r\n        if (task.freshTask) {\r\n            deleteTask()\r\n        } else {\r\n            setEditTaskToggel(false)\r\n        }\r\n    }\r\n\r\n\r\n    const TaskInfo = () => {\r\n        if (!moreInfo) {\r\n            return (\r\n                <div onClick={() => (!editTaskToggel) && setMoreInfo(!moreInfo)}>\r\n                    <div className=\"card bg-dark\">\r\n                        <div className=\"card-header taskLess\">\r\n                            <h2 >{task.name}</h2>\r\n                            <h2 className=\"taskLessInfo\">{timeToReminder(task.datetime)} &nbsp; <ReminderIcon /></h2>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"time\">{task.time}</div> */}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div onClick={() => (!editTaskToggel) && setMoreInfo(!moreInfo)}>\r\n                <div className=\"card bg-dark\">\r\n                    <div className=\"card-header taskLess\">\r\n                        <h2 >{task.name}</h2>\r\n                        <h2 className=\"taskLessInfo\">\r\n                            {timeToReminder(task.datetime)} &nbsp; <ReminderIcon />\r\n                        </h2>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\"><BsPencilSquare /> {task.description}</p>\r\n                        <p className=\"card-text\"><BsFillCalendarEventFill /> {convertToDate(new Date(task.datetime))}</p>\r\n                        <p className=\"card-text\"><BsFillClockFill /> {new Date(task.datetime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>\r\n                        <p className=\"card-text\"><BsFillPinMapFill /> {task.location}</p>\r\n                        <div className=\"btn-grid\">\r\n                            <button className=\"btn btn-outline-primary btn-lg\" onClick={() => { setEditTaskToggel(true) }}><strong>Edit</strong></button>\r\n                            <button className=\"btn btn-outline-danger btn-lg\" onClick={() => { deleteTask() }}><strong>Delete </strong></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    if (editTaskToggel) {\r\n        return (\r\n            <div className=\"card bg-dark\" >\r\n                <TaskForm task={task} form={form} _cancel={cancel} />\r\n            </div>\r\n        )\r\n    } else {\r\n        return (<TaskInfo />)\r\n    }\r\n}\r\n\r\nexport default Task","import { requestPermission } from \"../firebase-config\"\r\n\r\nconst TasksHeader = ({ _addTask }) => {\r\n    return (\r\n        <div className=\"tasksHeader\">\r\n            <button className='btn btn-primary btn-lg' type=\"button\" onClick={() => _addTask({\r\n                name: \"\",\r\n                description: \"\",\r\n                location: \"\",\r\n                reminder: false\r\n            })}>Add Task</button>\r\n            <button className=\"btn btn-lg btn-outline-primary\" >Button</button>\r\n            <button className=\"btn btn-lg btn-outline-primary\">Button</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TasksHeader","import Task from \"./Task\"\r\nimport TasksHeader from \"./TasksHeader\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\n// Firebase\r\nimport { doc, setDoc, getDoc } from \"firebase/firestore\"\r\nimport { onAuthStateChanged } from \"firebase/auth\";\r\nimport { db, auth } from \"../firebase-config\"\r\n\r\n\r\nconst Tasks = ({ tasks, _updateTask, _deleteTask, _addTask, nav }) => {\r\n    const [user, setUser] = useState(null)\r\n    useEffect(() => {\r\n        onAuthStateChanged(auth, async (user) => {\r\n            console.log(\"onAuthStateChanged\")\r\n            if (!user) return nav(\"/\")\r\n            const docRef = doc(db, \"users\", user.uid);\r\n            const docSnap = await getDoc(docRef)\r\n            user.extraInfo = docSnap.data()\r\n            setUser(user)\r\n        })\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     if (!user) {\r\n    //         return nav(\"/\")\r\n    //     }\r\n    // })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"tasks\">\r\n                <TasksHeader _addTask={_addTask} />\r\n                {tasks.map((task, index) => {\r\n                    return <Task key={index} task={task} _updateTask={_updateTask} _deleteTask={_deleteTask} />\r\n                })}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Tasks"],"names":["task","form","_cancel","useState","taskData","setTaskData","datetime","setdatetime","useEffect","string","dt","Date","setMinutes","getMinutes","getTimezoneOffset","toISOString","slice","stringToHtmlDatetime","ReminderIcon","reminder","size","onSubmit","name","freshTask","className","FloatingLabel","controlId","label","Form","autoFocus","autoComplete","type","placeholder","defaultValue","onChange","e","target","value","description","Button","variant","style","padding","onClick","location","convertToDate","date","now","day","getDate","month","getMonth","today","getFullYear","console","log","_updateTask","_deleteTask","moreInfo","setMoreInfo","editTaskToggel","setEditTaskToggel","timeToReminder","time","deleteTask","datetimeString","moment","fromNow","TaskInfo","toLocaleTimeString","hour","minute","_addTask","tasks","nav","setUser","onAuthStateChanged","auth","user","docRef","doc","db","uid","getDoc","docSnap","extraInfo","data","map","index"],"sourceRoot":""}